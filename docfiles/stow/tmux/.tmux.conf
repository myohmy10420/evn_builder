# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
                            sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# Setting the prefix to C-b
# START:prefix
set -g prefix `
# END:prefix

# Free the original Ctrl-b prefix keybinding
# START:unbind
unbind C-b
# END:unbind

#setting the delay between prefix and command
# START:delay
set -sg escape-time 0
# END:delay

# Ensure that we can send ` to other apps
# START:bind_prefix
bind "'" send-prefix
# END:bind_prefix

# Set the base index for windows to 1 instead of 0
# START:index
set -g base-index 1
# END:index

# Set the base index for panes to 1 instead of 0
# START:panes_index
setw -g pane-base-index 1
# END:panes_index

# Reload the file with Prefix r
# START:reload
bind r source-file ~/.tmux.conf \; display "Reloaded!"
# END:reload

# splitting panes
# START:panesplit
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'bind \ split-window -h -c "#{pane_current_path}";'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'bind \\ split-window -h -c "#{pane_current_path}";'

bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
# END:panesplit

# moving between session
# START:clientselect
# bind \ switch-client -n
# END:clientselect

# moving between panes
# START:paneselect
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R
# bind Up    select-pane -U
# bind Down  select-pane -D
# bind Left  select-pane -L
# bind Right select-pane -R
# END:paneselect

# Quick pane selection
# START:panecycling
# bind -r j select-pane -t :.+
# bind -r k select-pane -t :.-
bind -r o select-pane -t :.+
# END:panecycling

# Quick window selection
# START:windowcycling
# bind -r h select-window -t :-
# bind -r l select-window -t :+
bind ` last-window
bind -r n select-window -t :+
# bind -r / rotate-window
# END:windowcycling

# Pane resizing
# START:paneresize
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# END:paneresize

# Copy & paste
# START:copy&paste
bind v copy-mode
bind p paste-buffer -p
bind PageUp copy-mode -u
bind PageDown copy-mode
# END:copy&paste

# mouse support - set to on if you want to use the mouse
# START:mouse
set -g mouse off
# END:mouse

# Set the default terminal mode to 256color mode
# START:termcolor
set -g default-terminal "screen-256color"
# END:termcolor

# enable activity alerts
#START:activity
setw -g monitor-activity on
set -g visual-activity on
#END:activity

# set the status line's colors
# START:statuscolor
set -g status-fg white
set -g status-bg black
# END:statuscolor

# set the color of the window list
# START:windowstatuscolor
set-window-option -g window-status-style fg=cyan
set-window-option -g window-status-style bg=default
set-window-option -g window-status-style dim
# END:windowstatuscolor

# set colors for the active window
# START:activewindowstatuscolor
set-window-option -g window-status-current-style fg=white
set-window-option -g window-status-current-style bg=red
set-window-option -g window-status-current-style bright
# END:activewindowstatuscolor

# pane colors
# START:panecolors
set -g pane-border-style fg=green
set -g pane-border-style bg=black
set -g pane-active-border-style fg=black
set -g pane-active-border-style bg=green
# END:panecolors

# Command / message line
# START:cmdlinecolors
set -g message-style fg=white
set -g message-style bg=black
set -g message-style bright
# END:cmdlinecolors

# Status line left side
# START:statusleft
set -g status-left-length 40
set -g status-left "#[fg=green]#S:#[fg=yellow]#I.#[fg=cyan]#P"
# END:statusleft

# Status line right side
# 15% | 28 Nov 18:15
# START: statusright
set -g status-right "#[fg=cyan]%d %b %R"
# END:statusright

# Update the status bar every sixty seconds
# START:updateinterval
set -g status-interval 30
# END:updateinterval

# Center the window list
# START:centerwindowlist
set -g status-justify centre
# END:centerwindowlist

# enable vi keys.
# START:vikeys
setw -g mode-keys vi
# END:vikeys

# Maximize and restore a pane
# START:max
bind z break-pane
# END:max
# START:restore
bind Z join-pane -h -t :-
# END:restore

# # Log output to a text file on demand
# # START:pipe-pane
# bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W-tmux.log"
# bind p pipe-pane \; display "Ended logging to ~/#W-tmux.log"
# # END:pipe-pane

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vi && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vi && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vi && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vi && tmux send-keys C-l) || tmux select-pane -R"

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vi && tmux send-keys 'C-\\') || tmux select-pane -l";'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vi && tmux send-keys 'C-\\') || tmux select-pane -l";'

setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
set -g update-environment -r
